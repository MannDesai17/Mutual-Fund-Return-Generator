# -*- coding: utf-8 -*-
"""Final-MF-AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ST8ZYYT6Q--xmwATWTbnxCFZOjJS_2Au
"""

!pip install -q pyspark
!apt-get install -y openjdk-11-jdk-headless -qq > /dev/null

import numpy as np
import pandas as pd
from pyspark.sql import functions as F
from pyspark.sql import SparkSession

spark = SparkSession.builder.getOrCreate()

def count_na(data, normalize=False):
    if normalize:
        count = data.count()
        return data.select([(F.count(F.when(F.isnan(c) | F.col(c).isNull() if t not in ('date', 'timestamp') else F.col(c).isNull(), c))/count).alias(c) for c, t in data.dtypes])
    return data.select([(F.count(F.when(F.isnan(c) | F.col(c).isNull() if t not in ('date', 'timestamp') else F.col(c).isNull(), c))).alias(c) for c, t in data.dtypes])

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv("/content/drive/MyDrive/mf_data/mf_data.csv")

data.head()

date=data["NAV_DATE"]

len(date)

unique_dates=list(set(date))

# Convert `unique_dates` to a Pandas Series of Timestamps
unique_dates = pd.to_datetime(unique_dates)

min_date = unique_dates.min().strftime("%Y-%m-%d")
max_date = unique_dates.max().strftime("%Y-%m-%d")

date_range = pd.date_range(min_date, max_date, freq='1D')

if set(date_range) == set(unique_dates):
    print(f'Data contains all days between {min_date} and {max_date}')

# Convert 'Date' column to datetime format if necessary
data['NAV_DATE'] = pd.to_datetime(data['NAV_DATE'])

# Filter data for a single day (e.g. 2020-12-05)
data_single_day = data.loc[data['NAV_DATE'] == pd.Timestamp('2020-12-05')]

# Print the filtered data
print(data_single_day)

# Filter data for latest date
latest_data = data[data['NAV_DATE'] == latest_date]
print(latest_data)

axis_long_eq = data[data['NAME'] == 'Aditya Birla Sun Life Tax Relief96 Fund- (ELSS U/S 80C of IT ACT) - Growth-Regular Plan'].sort_values('NAV_DATE')
print(axis_long_eq)

pandas_data = data[data['NAME'] == "Aditya Birla Sun Life Tax Relief96 Fund- (ELSS U/S 80C of IT ACT) - Growth-Regular Plan"].sort_values('NAV_DATE')
pandas_data['NAV_DATE'] = pd.to_datetime(pandas_data['NAV_DATE'])
pandas_data

pandas_data.info()

pandas_data.query('NAV_VALUE == 0')

# Get fund name from user
fund_description = input("Enter the Fund NAME: ")

# Initialize a list to store the returns for the given fund
fund_returns = []

# Filter data for the given fund description
fund_data = data[data['NAME'] == fund_description]

latest_date=fund_data['NAV_DATE'][len(fund_data['NAV_DATE'])-1]

# Filter data for the past 1 month
one_month_data = fund_data[(fund_data['NAV_DATE'] >= latest_date - pd.Timedelta(days=30)) & (fund_data['NAV_DATE'] <= latest_date)]

# Filter data for the past 3 months
three_month_data = fund_data[(fund_data['NAV_DATE'] >= latest_date - pd.Timedelta(days=90)) & (fund_data['NAV_DATE'] <= latest_date)]

# Filter data for the past 6 months
six_month_data = fund_data[(fund_data['NAV_DATE'] >= latest_date - pd.Timedelta(days=180)) & (fund_data['NAV_DATE'] <= latest_date)]

# Filter data for the past 1 year
one_year_data = fund_data[(fund_data['NAV_DATE'] >= latest_date - pd.Timedelta(days=365)) & (fund_data['NAV_DATE'] <= latest_date)]

# Filter data for the past 3 years
three_year_data = fund_data[(fund_data['NAV_DATE'] >= latest_date - pd.Timedelta(days=3*365)) & (fund_data['NAV_DATE'] <= latest_date)]

# Calculate the absolute returns for the past 1 month, 3 months, 6 months, 1 year, and 3 years
returns = {
    '1 Month': (one_month_data['NAV_VALUE'].iloc[-1] - one_month_data['NAV_VALUE'].iloc[0]) / one_month_data['NAV_VALUE'].iloc[0] * 100,
    '3 Months': (three_month_data['NAV_VALUE'].iloc[-1] - three_month_data['NAV_VALUE'].iloc[0]) / three_month_data['NAV_VALUE'].iloc[0] * 100,
    '6 Months': (six_month_data['NAV_VALUE'].iloc[-1] - six_month_data['NAV_VALUE'].iloc[0]) / six_month_data['NAV_VALUE'].iloc[0] * 100,
    '1 Year': (one_year_data['NAV_VALUE'].iloc[-1] - one_year_data['NAV_VALUE'].iloc[0]) / one_year_data['NAV_VALUE'].iloc[0] * 100,
    '3 Years': (three_year_data['NAV_VALUE'].iloc[-1] - three_year_data['NAV_VALUE'].iloc[0]) / three_year_data['NAV_VALUE'].iloc[0] * 100
}

# Add the fund and its returns to the list
fund_returns.append([fund_description] + [round(ret, 4) for ret in returns.values()])

# Convert the list to a Pandas DataFrame
df = pd.DataFrame(fund_returns, columns=['Fund Description', '1 Month Absolute Return', '3 Months Absolute Return', '6 Months Absolute Return', '1 Year Absolute Return', '3 Years Absolute Return'])

# Print the DataFrame
print(df)